% TIP: To generate PDF file run `pdflatex filename.tikz`. To generate PNG file
% run `convert -density 300 filename.pdf -resize 50% filename.png` (requires
% intallation of `imagemagick` tool).

\documentclass{standalone}%
\usepackage{tikz}%
\usetikzlibrary{positioning,shapes,arrows.meta,chains}%

% These commands are used to draw arrow labels
\newcommand{\yes}{node [auto, pos=0, xshift=5mm]{Y}}%
\newcommand{\no}{node [auto, swap, pos=0, xshift=-5mm]{N}}%

% We need layers to draw the background
\pgfdeclarelayer{background}%
\pgfsetlayers{background,main}%

\begin{document}%
\begin{tikzpicture}[
% Specify styles for nodes:
    base/.style = {rectangle, rounded corners, draw=black,
                   minimum width=4cm, minimum height=1cm,
                   text centered, text width=4cm, align=flush center},
   start/.style = {base, fill=blue!30},
  revert/.style = {base, fill=red!30},
  action/.style = {base, fill=black!5},
   check/.style = {diamond, aspect=1.2, draw=black, fill=black!5,
                   minimum width=1cm, align=center},
   note1/.style = {rectangle, draw, dashed, fill=green!10,
                   align=flush left, text width=5cm},
   note2/.style = {rectangle, draw, dashed, fill=cyan!10,
                   align=flush left, text width=5cm},
              > = Triangle,                  % defines the arrow tip style when `->` is used
           font = \sffamily,
]

% FRAUD CHALLENGE
% Nodes
\node[start]                                                     (fc_start)   {Send \textbf{fraud challenge}};
\node[check, below=of fc_start]                                  (fc_check1)  {Has challenge for this UTXO\\ been already defeated?};
\node[revert, below right=of fc_check1]                          (fc_revert1) {Transaction reverted};
\node[check, below left=of fc_check1, xshift=-1cm]               (fc_check2)  {Is wallet LIVE,\\ MOVING\_FUNDS\\ or CLOSING?};
\node[check, below right=of fc_check2]                           (fc_check3)  {Has challenger deposited\\ required amount?};
\node[revert, below left=of fc_check3, xshift=-3cm]              (fc_revert2) {Transaction reverted};
\node[action, below right=of fc_check3]                          (fc_action1) {Save time (starting point for defeat timeout calculation)};
\node[note1, right=of fc_start.south east, anchor=south west]    (fc_note1)   {Can be successfully called for wallets:\\
                                                                               \textbf{- LIVE\\
                                                                               - MOVING\_FUNDS\\
                                                                               - CLOSING}};
\node[note2, above=of fc_note1.north, anchor=south, yshift=-8mm] (fc_note2)   {Sender incentivized by:\\ \textbf{Fraction of slashed amount if fraud doesn't get defeated}};

% Arrows
\draw[->] (fc_start)   -- (fc_check1);
\draw[->] (fc_check1)  -| (fc_check2)  \no;
\draw[->] (fc_check1)  -| (fc_revert1) \yes;
\draw[->] (fc_check2)  -| (fc_revert2) \no;
\draw[->] (fc_check2)  -| (fc_check3)  \yes;
\draw[->] (fc_check3)  -| (fc_revert2) \no;
\draw[->] (fc_check3)  -| (fc_action1) \yes;


% DEFEAT FRAUD
% Nodes
\node[start, right=of fc_start, xshift=100mm]                    (df_start)   {\textbf{Defeat fraud challenge}};
\node[check, below=of df_start]                                  (df_check1)  {Is there a pending\\ notification to be defeated?};
\node[check, below right=of df_check1]                           (df_check2)  {Has the defeat timeout\\ been reported?};
\node[check, below left=of df_check2]                            (df_check3)  {Were the UTXOs\\ in the challenged transaction\\ spent non-fraudulently?};
\node[revert, below right=of df_check2]                          (df_revert1) {Transaction reverted};
\node[revert, below left=of df_check3]                           (df_revert2) {Transaction reverted};
\node[action, below right=of df_check3, yshift=-3cm]             (df_action1) {Close the fraud challenge, don't allow for challenging again)};
\node[action, below=of df_action1]                               (df_action2) {Transfer the challenger's deposit to the treasury};
\node[note1, right=of df_start.south east, anchor=south west]    (df_note1)   {Can be successfully called for wallets:\\ 
                                                                               \textbf{- LIVE\\
                                                                               - MOVING\_FUNDS\\
                                                                               - CLOSING}};
\node[note2, above=of df_note1.north, anchor=south, yshift=-8mm] (df_note2)   {Sender incentivized by:\\ \textbf{Receiving recompensation from the treasury}};

% Arrows
\draw[->] (df_start)   -- (df_check1);
\draw[->] (df_check1)  -| (df_revert2) \no;
\draw[->] (df_check1)  -| (df_check2)  \yes;
\draw[->] (df_check2)  -| (df_check3)  \no;
\draw[->] (df_check2)  -| (df_revert1) \yes;
\draw[->] (df_check3)  -| (df_revert2) \no;
\draw[->] (df_check3)  -| (df_action1) \yes;
\draw[->] (df_action1) -- (df_action2);


% DEFEAT FRAUD CHALLENGE WITH HEARTBEAT
% Nodes
\node[start, right=of df_start, xshift=110mm]                      (dfwt_start)   {\textbf{Defeat fraud challenge with heartbeat}};
\node[check, below=of dfwt_start]                                  (dfwt_check1)  {Is there a pending\\ notification to be defeated?};
\node[check, below right=of dfwt_check1]                           (dfwt_check2)  {Has the defeat timeout\\ been reported?};
\node[check, below left=of dfwt_check2]                            (dfwt_check3)  {Is the\\ attatched message\\ a valid heartbeat\\ message?};
\node[revert, below right=of dfwt_check2]                          (dfwt_revert1) {Transaction reverted};
\node[revert, below left=of dfwt_check3]                           (dfwt_revert2) {Transaction reverted};
\node[note1, right=of dfwt_start.south east, anchor=south west]    (dfwt_note1)   {Can be successfully called for wallets:\\ 
                                                                                   \textbf{- LIVE\\
                                                                                   - MOVING\_FUNDS\\
                                                                                   - CLOSING}};
\node[note2, above=of dfwt_note1.north, anchor=south, yshift=-8mm] (dfwt_note2)   {Sender incentivized by:\\ \textbf{Receiving recompensation from the treasury}};

% Arrows
% In places where arrows needs to bend more than once, we force the lines to
% pass through intermediary points. 
% (a,b) - sets point at an exact (a,b) coordinate
% +(a,b) - sets point at current point and moves it by (a,b) vector, but doesn't
%          remember the position afterwards
% ++(a,b) - sets point at current point and moves it by (a,b) vector and
%           remembers the position afterwards
% To ease edition of the diagram in the future, usage of relative values is
% recommended.
\draw[->] (dfwt_start)   --                (dfwt_check1);
\draw[->] (dfwt_check1)  -|                (dfwt_revert2) \no;
\draw[->] (dfwt_check1)  -|                (dfwt_check2)  \yes;
\draw[->] (dfwt_check2)  -|                (dfwt_check3)  \no;
\draw[->] (dfwt_check2)  -|                (dfwt_revert1) \yes;
\draw[->] (dfwt_check3)  -|                (dfwt_revert2) \no;
\draw[->] (dfwt_check3)  -- +(4,0) \yes |- (df_action1);
\draw[->] (df_action1)   --                (df_action2);


% FRAUD DEFEAT TIMEOUT
% Nodes
\node[start, right=of dfwt_start, xshift=105mm]                   (fdt_start)   {Send notification about \textbf{fraud defeat timeout}};
\node[check, below=of fdt_start]                                  (fdt_check1)  {Is there a pending\\ fraud notification that\\ hasn't been defeated?};
\node[check, below right=of fdt_check1]                           (fdt_check2)  {Has the defeat \\ timeout passed?};
\node[action, below right=of fdt_check2]                          (fdt_action1) {Return the challenger's deposit to him};
\node[check, below=of fdt_action1]                                (fdt_check3)  {Is wallet LIVE,\\ MOVING\_FUNDS\\ or CLOSING?};
\node[check, below left=of fdt_check3, xshift=-40mm]              (fdt_check4)  {Is wallet\\ TERMINATED?};
\node[revert, below left=of fdt_check4]                           (fdt_revert1) {Transaction reverted};
\node[action, below right=of fdt_check3]                          (fdt_action2) {Slashing, reward for the fraud challenge notifier};
\node[check, below=of fdt_action2]                                (fdt_check5)  {Is wallet marked\\ as ACTIVE?};
\node[action, below right=of fdt_check5]                          (fdt_action3) {Clear ACTIVE field};
\node[action, below left=of fdt_action3, xshift=-20mm]            (fdt_action4) {Change wallet's state to TERMINATED, delete wallet from registry};
\node[action, below=of fdt_action4]                               (fdt_action5) {Emit notification};
\node[note1, right=of fdt_start.south east, anchor=south west]    (fdt_note1)   {Can be successfully called for wallets:\\ 
                                                                                 \textbf{- LIVE\\
                                                                                 - MOVING\_FUNDS\\
                                                                                 - CLOSING}};
\node[note2, above=of fdt_note1.north, anchor=south, yshift=-8mm] (fdt_note2)   {Sender incentivized by:\\ \textbf{Fraction of slashed amount for fraud challenge notifier}};

% Arrows
\draw[->] (fdt_start)   --                (fdt_check1);
\draw[->] (fdt_check1)  -|                (fdt_revert1)       \no;
\draw[->] (fdt_check1)  -|                (fdt_check2)        \yes;
\draw[->] (fdt_check2)  -|                (fdt_revert1)       \no;
\draw[->] (fdt_check2)  -|                (fdt_action1)       \yes;
\draw[->] (fdt_action1) --                (fdt_check3);
\draw[->] (fdt_check3)  -|                (fdt_check4)        \no;
\draw[->] (fdt_check3)  -|                (fdt_action2)       \yes;
\draw[->] (fdt_check4)  -|                (fdt_revert1)       \no;
\draw[->] (fdt_check4)  -| +(4,0) \yes |- (fdt_action5.west);
\draw[->] (fdt_action2) --                (fdt_check5);
\draw[->] (fdt_check5)  -|                (fdt_action4)       \no;
\draw[->] (fdt_check5)  -|                (fdt_action3)       \yes;
\draw[->] (fdt_action3) |-                (fdt_action4);
\draw[->] (fdt_action4) --                (fdt_action5);


% BACKGROUND
% To draw the background behind the nodes and other objects we use pgf layers. 
% We calculate top left and bottom right corners position of current canvas and
% construct white background between those points expanded by some small amount.
% This gives us nice little margin around the diagram.

\begin{pgfonlayer}{background}
  \path (current bounding box.north west)+(-0.2,0.2) node (a) {};
  \path (current bounding box.south east)+(0.2,-0.2) node (b) {};
  \path[fill=white] (a) rectangle (b);
\end{pgfonlayer}

\end{tikzpicture}
\end{document}
